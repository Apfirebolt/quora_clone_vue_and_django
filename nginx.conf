# Sets the number of worker processes. 'auto' means Nginx will try to auto-detect
# the number of CPU cores and use that many worker processes.
worker_processes auto;

# Defines event-related configuration.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

# Defines the HTTP server context.
http {
    # Includes standard MIME types mapping file. This is crucial for browsers to correctly
    # interpret served files (e.g., text/html for HTML files, image/jpeg for JPEG images).
    include mime.types;
    # Sets the default MIME type for files if it cannot be determined otherwise.
    default_type application/octet-stream;

    # Enables or disables the use of sendfile(). This allows Nginx to send files directly
    # from the kernel space, improving performance for static files.
    sendfile on;
    # Sets the timeout for keep-alive connections with clients.
    keepalive_timeout 65;

    # Defines an upstream group named 'backend' for your backend service.
    # Requests proxied to 'backend' will go to the 'web' Docker service on port 8000.
    upstream backend {
        server web:8000; # Corresponds to your 'web' service in docker-compose.yml
    }

    # Defines an upstream group named 'frontend' for your frontend service.
    # Requests proxied to 'frontend' will go to the 'client' Docker service on port 8080.
    upstream frontend {
        server client:8080; # Corresponds to your 'client' service in docker-compose.yml
    }

    # Defines a virtual server block that listens for incoming HTTP requests.
    server {
        # Nginx will listen on port 80 for incoming connections.
        listen 80;
        # Specifies the server name(s) for this virtual host. Change 'localhost' to your domain name if you have one.
        server_name localhost;

        # Route for API requests:
        # All requests starting with /api/ will be forwarded to the 'backend' service.
        location /api/ {
            # Proxies the request to the 'backend' upstream group.
            proxy_pass http://backend/;
            # Sets the 'Host' header in the proxied request to the original host name.
            proxy_set_header Host $host;
            # Passes the real IP address of the client to the backend.
            proxy_set_header X-Real-IP $remote_addr;
            # Appends the client's IP address to the 'X-Forwarded-For' header, maintaining a chain of proxies.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Sets the 'X-Forwarded-Proto' header to indicate the original protocol (http or https).
            proxy_set_header X-Forwarded-Proto $scheme;
            # Important for WebSocket connections (e.g., for real-time features).
            # Sets the HTTP protocol version to 1.1.
            proxy_http_version 1.1;
            # Passes the 'Upgrade' header for WebSocket handshakes.
            proxy_set_header Upgrade $http_upgrade;
            # Passes the 'Connection' header for WebSocket handshakes.
            proxy_set_header Connection "upgrade";
        }

        # Catch-all route for all other requests:
        # All requests that do not match the /api/ location will be forwarded to the 'frontend' service.
        location / {
            # Proxies the request to the 'frontend' upstream group.
            # The trailing slash after 'frontend/' ensures the original path is preserved.
            proxy_pass http://frontend/;
            # Sets the 'Host' header.
            proxy_set_header Host $host;
            # Passes the real IP.
            proxy_set_header X-Real-IP $remote_addr;
            # Appends to X-Forwarded-For.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # Sets X-Forwarded-Proto.
            proxy_set_header X-Forwarded-Proto $scheme;
            # Important for WebSocket connections if your frontend uses them.
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Optional: Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html; # Point to a simple 404 page if you have one
            internal;
        }
    }
}
